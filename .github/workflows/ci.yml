name: CI - Breakout Quality Gate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ❶ 保護：阻擋 Kaspersky 等注入資源被混入
      - name: Block known injected resources
        run: |
          set -eux
          if grep -RniE "gc\.kis\.v2\.scr\.kaspersky-labs\.com" .; then
            echo "::error::Detected forbidden injected resource (Kaspersky) in sources."
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ❷ 啟本地伺服器（不裝依賴，直接用 npx）供 Headless 瀏覽器連線
      - name: Start static server
        run: |
          npx --yes http-server -p 4173 -c-1 . &
          echo $! > .server.pid
          sleep 2
      - name: Verify server is up
        run: curl -sSf http://localhost:4173/index.html >/dev/null

      # ❸ 以 Playwright/Chromium 打開 index.html，檢查 Console 0 error/warn，並驗證畫面
      - name: Install Playwright Chromium
        run: npx --yes playwright@1.47.2 install --with-deps chromium
      - name: Run smoke test
        run: |
          node - <<'JS'
          const { chromium } = require('playwright');
          (async () => {
            const browser = await chromium.launch({ headless: true });
            const page = await browser.newPage();

            let hasConsoleError = false;
            let hasConsoleWarn  = false;
            page.on('console', msg => {
              const type = msg.type();
              if (type === 'error') hasConsoleError = true;
              if (type === 'warning' || type === 'warn') hasConsoleWarn = true;
              console.log(`[console:${type}]`, msg.text());
            });

            await page.goto('http://localhost:4173/index.html', { waitUntil: 'domcontentloaded', timeout: 60_000 });

            await page.mouse.click(200, 200).catch(() => {});
            await page.keyboard.press('Space').catch(() => {});

            const hasAutoplay = await page.evaluate(() => typeof window.__autoplay === 'function');
            if (hasAutoplay) {
              await page.evaluate(() => window.__autoplay?.(6000));
              await page.waitForTimeout(6500);
            } else {
              await page.waitForTimeout(3000);
            }

            const rendered = await page.evaluate(() => {
              const hasCanvas = !!document.querySelector('canvas');
              const hasHud = !!document.getElementById('hud') || !!document.querySelector('.hud');
              const hasBody = document.body && document.body.innerText !== undefined;
              return hasCanvas || hasHud || hasBody;
            });

            if (!rendered) {
              console.error('No visible render hints (canvas/HUD).');
              await browser.close();
              process.exit(1);
            }
            if (hasConsoleError) {
              console.error('Console has error messages.');
              await browser.close();
              process.exit(1);
            }
            if (hasConsoleWarn) {
              console.error('Console has warnings.');
              await browser.close();
              process.exit(1);
            }

            await browser.close();
            console.log('Smoke test passed: no console error/warn & page rendered.');
          })().catch(e => { console.error(e); process.exit(1); });
          JS

      # ❹ 結束時清掉伺服器
      - name: Stop static server
        if: always()
        run: |
          if [ -f .server.pid ]; then kill $(cat .server.pid) || true; fi
